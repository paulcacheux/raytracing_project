use std::collections::HashMap;
use std::str::FromStr;

use crate::scene_description::builder::SceneDescriptionBuilder;
use crate::scene_description::{SceneObjectOrIdentifier, SceneObject};
use raytracer::{Vec3, FloatTy};

grammar(builder: &mut SceneDescriptionBuilder);

pub Program: () = {
    <declarations:Statement+> <presets:Preset+> => {}
};

pub Statement: () = {
    Declaration => {},
    Assignment => {},
};

pub Declaration: () = {
    "decl" <creator:Identifier> "(" <params:Params> ")" ";" => {
        builder.declare(creator, params);
    }
};

pub Assignment: () = {
    "let" <name:Identifier> "=" <value:ObjectOrIdentifier> ";" => {
        builder.register_variable(name, value);
    }
};

pub Preset: () = {
    "preset" <name:Identifier> "{" <params:Params> "}" ";" => {
        builder.add_preset(name, params);
    }
};

pub Object: SceneObject = {
    <v:Vec3> => SceneObject::Vec3(v),
    <f:Float> => SceneObject::Float(f),
    <creator:Identifier> "(" <params:Params> ")" => {
        builder.build_object(creator, params)
    },
};

pub Vec3: Vec3 = {
    "vec3" "(" <c:Float> ")" => Vec3::repeat(c),
    "vec3" "(" <x:Float> "," <y:Float> "," <z:Float> ")" => Vec3::new(x, y, z),
};

Identifier: String = <s:ID> => s.to_owned();
Float: FloatTy = <s:FLOAT> => FloatTy::from_str(s).unwrap();

Params: HashMap<String, SceneObjectOrIdentifier> = {
    <params:Comma<Param>> => {
        params.into_iter().collect()
    }
};

Param: (String, SceneObjectOrIdentifier) = {
    <name:Identifier> ":" <value:ObjectOrIdentifier> => (name, value)
};

ObjectOrIdentifier: SceneObjectOrIdentifier = {
    <obj:Object> => SceneObjectOrIdentifier::SceneObject(obj),
    <id:Identifier> => SceneObjectOrIdentifier::Identifier(id),
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

match {
    "decl",
    "vec3",
    "let",
    "preset",
    "{",
    "}",
    "(",
    ")",
    ",",
    ";",
    ":",
    "=",
    
    r"[a-zA-Z_][a-zA-Z_0-9]*" => ID,
    r"(\+|-)?[0-9]+(\.[0-9]+)?" => FLOAT,

    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { },
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
}
